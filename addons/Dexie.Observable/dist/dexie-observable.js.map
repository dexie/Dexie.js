{"version":3,"file":"dexie-observable.js","sources":["../src/utils.js","../src/override-create-transaction.js","../src/wakeup-observers.js","../src/change_types.js","../src/hooks/creating.js","../src/hooks/updating.js","../src/hooks/deleting.js","../src/hooks/crud-monitor.js","../src/on-storage.js","../src/override-open.js","../src/intercomm.js","../src/override-parse-stores-spec.js","../src/delete-old-changes.js","../src/Dexie.Observable.js"],"sourcesContent":["export function nop() {}\n\nexport function promisableChain(f1, f2) {\n  if (f1 === nop) return f2;\n  return function() {\n    var res = f1.apply(this, arguments);\n    if (res && typeof res.then === 'function') {\n      var thiz = this, args = arguments;\n      return res.then(function() {\n        return f2.apply(thiz, args);\n      });\n    }\n    return f2.apply(this, arguments);\n  };\n}\n\nexport function createUUID() {\n  // Decent solution from http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript\n  var d = Date.now();\n  var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x7 | 0x8)).toString(16);\n  });\n  return uuid;\n}\n","export default function initOverrideCreateTransaction(db, wakeupObservers) {\n  return function overrideCreateTransaction(origFunc) {\n    return function (mode, storenames, dbschema, parent) {\n      if (db.dynamicallyOpened()) return origFunc.apply(this, arguments); // Don't observe dynamically opened databases.\n      var addChanges = false;\n      if (mode === 'readwrite' && storenames.some(function (storeName) {\n            return dbschema[storeName] && dbschema[storeName].observable;\n          })) {\n        // At least one included store is a observable store. Make sure to also include the _changes store.\n        addChanges = true;\n        storenames = storenames.slice(0); // Clone\n        if (storenames.indexOf(\"_changes\") === -1)\n          storenames.push(\"_changes\"); // Otherwise, firefox will hang... (I've reported the bug to Mozilla@Bugzilla)\n      }\n      // Call original db._createTransaction()\n      var trans = origFunc.call(this, mode, storenames, dbschema, parent);\n      // If this transaction is bound to any observable table, make sure to add changes when transaction completes.\n      if (addChanges) {\n        trans._lastWrittenRevision = 0;\n        trans.on('complete', function () {\n          if (trans._lastWrittenRevision) {\n            // Changes were written in this transaction.\n            if (!parent) {\n              // This is root-level transaction, i.e. a physical commit has happened.\n              // Delay-trigger a wakeup call:\n              if (wakeupObservers.timeoutHandle) clearTimeout(wakeupObservers.timeoutHandle);\n              wakeupObservers.timeoutHandle = setTimeout(function () {\n                delete wakeupObservers.timeoutHandle;\n                wakeupObservers(trans._lastWrittenRevision);\n              }, 25);\n            } else {\n              // This is just a virtual commit of a sub transaction.\n              // Wait with waking up observers until root transaction has committed.\n              // Make sure to mark root transaction so that it will wakeup observers upon commit.\n              var rootTransaction = (function findRootTransaction(trans) {\n                return trans.parent ? findRootTransaction(trans.parent) : trans;\n              })(parent);\n              rootTransaction._lastWrittenRevision = Math.max(\n                  trans._lastWrittenRevision,\n                  rootTransaction.lastWrittenRevision || 0);\n            }\n          }\n        });\n        // Derive \"source\" property from parent transaction by default\n        if (trans.parent && trans.parent.source) trans.source = trans.parent.source;\n      }\n      return trans;\n    };\n  };\n}\n","import Dexie from 'dexie';\n\nexport default function initWakeupObservers(db, Observable, localStorage) {\n  return function wakeupObservers(lastWrittenRevision) {\n    // Make sure Observable.latestRevision[db.name] is still below our value, now when some time has elapsed and other db instances in same window possibly could have made changes too.\n    if (Observable.latestRevision[db.name] < lastWrittenRevision) {\n      // Set the static property lastRevision[db.name] to the revision of the last written change.\n      Observable.latestRevision[db.name] = lastWrittenRevision;\n      // Wakeup ourselves, and any other db instances on this window:\n      Dexie.ignoreTransaction(function () {\n        Observable.on('latestRevisionIncremented').fire(db.name, lastWrittenRevision);\n      });\n      // Observable.on.latestRevisionIncremented will only wakeup db's in current window.\n      // We need a storage event to wakeup other windwos.\n      // Since indexedDB lacks storage events, let's use the storage event from WebStorage just for\n      // the purpose to wakeup db instances in other windows.\n      if (localStorage) localStorage.setItem('Dexie.Observable/latestRevision/' + db.name, lastWrittenRevision); // In IE, this will also wakeup our own window. However, onLatestRevisionIncremented will work around this by only running once per revision id.\n    }\n  };\n}\n","// Change Types\nexport const CREATE = 1;\nexport const UPDATE = 2;\nexport const DELETE = 3;\n","import Dexie from 'dexie';\n\nimport {CREATE} from '../change_types';\n\nexport default function initCreatingHook(db, table) {\n  return function creatingHook(primKey, obj, trans) {\n    /// <param name=\"trans\" type=\"db.Transaction\"></param>\n    var rv = undefined;\n    if (primKey === undefined && table.schema.primKey.uuid) {\n      primKey = rv = Dexie.Observable.createUUID();\n      if (table.schema.primKey.keyPath) {\n        Dexie.setByKeyPath(obj, table.schema.primKey.keyPath, primKey);\n      }\n    }\n\n    var change = {\n      source: trans.source || null, // If a \"source\" is marked on the transaction, store it. Useful for observers that want to ignore their own changes.\n      table: table.name,\n      key: primKey === undefined ? null : primKey,\n      type: CREATE,\n      obj: obj\n    };\n\n    var promise = db._changes.add(change).then(function (rev) {\n      trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\n      return rev;\n    });\n\n    // Wait for onsuccess so that we have the primKey if it is auto-incremented and update the change item if so.\n    this.onsuccess = function (resultKey) {\n      if (primKey != resultKey)\n        promise._then(function () {\n          change.key = resultKey;\n          db._changes.put(change);\n        });\n    };\n\n    this.onerror = function () {\n      // If the main operation fails, make sure to regret the change\n      promise._then(function (rev) {\n        // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\n        db._changes.delete(rev);\n      });\n    };\n\n    return rv;\n  };\n}\n","import Dexie from 'dexie';\n\nimport {UPDATE} from '../change_types';\n\nexport default function initUpdatingHook(db, tableName) {\n  return function updatingHook(mods, primKey, oldObj, trans) {\n    /// <param name=\"trans\" type=\"db.Transaction\"></param>\n    // mods may contain property paths with undefined as value if the property\n    // is being deleted. Since we cannot persist undefined we need to act\n    // like those changes is setting the value to null instead.\n    var modsWithoutUndefined = {};\n    // As of current Dexie version (1.0.3) hook may be called even if it wouldn't really change.\n    // Therefore we may do that kind of optimization here - to not add change entries if\n    // there's nothing to change.\n    var anythingChanged = false;\n    var newObj = Dexie.deepClone(oldObj);\n    for (var propPath in mods) {\n      var mod = mods[propPath];\n      if (typeof mod === 'undefined') {\n        Dexie.delByKeyPath(newObj, propPath);\n        modsWithoutUndefined[propPath] = null; // Null is as close we could come to deleting a property when not allowing undefined.\n        anythingChanged = true;\n      } else {\n        var currentValue = Dexie.getByKeyPath(oldObj, propPath);\n        if (mod !== currentValue && JSON.stringify(mod) !== JSON.stringify(currentValue)) {\n          Dexie.setByKeyPath(newObj, propPath, mod);\n          modsWithoutUndefined[propPath] = mod;\n          anythingChanged = true;\n        }\n      }\n    }\n    if (anythingChanged) {\n      var change = {\n        source: trans.source || null, // If a \"source\" is marked on the transaction, store it. Useful for observers that want to ignore their own changes.\n        table: tableName,\n        key: primKey,\n        type: UPDATE,\n        mods: modsWithoutUndefined,\n        oldObj: oldObj,\n        obj: newObj\n      };\n      var promise = db._changes.add(change); // Just so we get the correct revision order of the update...\n      this.onsuccess = function () {\n        promise._then(function (rev) {\n          trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\n        });\n      };\n      this.onerror = function () {\n        // If the main operation fails, make sure to regret the change.\n        promise._then(function (rev) {\n          // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\n          db._changes.delete(rev);\n        });\n      };\n    }\n  };\n}\n","import {DELETE} from '../change_types';\n\nexport default function initDeletingHook(db, tableName) {\n  return function deletingHook(primKey, obj, trans) {\n    /// <param name=\"trans\" type=\"db.Transaction\"></param>\n    var promise = db._changes.add({\n      source: trans.source || null, // If a \"source\" is marked on the transaction, store it. Useful for observers that want to ignore their own changes.\n      table: tableName,\n      key: primKey,\n      type: DELETE,\n      oldObj: obj\n    }).then(function (rev) {\n      trans._lastWrittenRevision = Math.max(trans._lastWrittenRevision, rev);\n      return rev;\n    })\n        .catch((e) => {\n          console.log(obj)\n          console.log(e.stack)\n        })\n    this.onerror = function () {\n      // If the main operation fails, make sure to regret the change.\n      // Using _then because if promise is already fullfilled, the standard then() would\n      // do setTimeout() and we would loose the transaction.\n      promise._then(function (rev) {\n        // Will only happen if app code catches the main operation error to prohibit transaction from aborting.\n        db._changes.delete(rev);\n      });\n    };\n  };\n}\n","import initCreatingHook from './creating';\nimport initUpdatingHook from './updating';\nimport initDeletingHook from './deleting';\n\nexport default function initCrudMonitor(db) {\n//\n// The Creating/Updating/Deleting hook will make sure any change is stored to the changes table\n//\n  return function crudMonitor(table) {\n    /// <param name=\"table\" type=\"db.Table\"></param>\n    if (table.hook._observing) return;\n    table.hook._observing = true;\n\n    const tableName = table.name;\n    table.hook('creating').subscribe(initCreatingHook(db, table));\n\n    table.hook('updating').subscribe(initUpdatingHook(db, tableName));\n\n    table.hook('deleting').subscribe(initDeletingHook(db, tableName));\n  };\n}\n","import Dexie from 'dexie';\n\nexport default function initOnStorage(Observable) {\n  return function onStorage(event) {\n    // We use the onstorage event to trigger onLatestRevisionIncremented since we will wake up when other windows modify the DB as well!\n    if (event.key && event.key.indexOf(\"Dexie.Observable/\") === 0) { // For example \"Dexie.Observable/latestRevision/FriendsDB\"\n      var parts = event.key.split('/');\n      var prop = parts[1];\n      var dbname = parts[2];\n      if (prop === 'latestRevision') {\n        var rev = parseInt(event.newValue, 10);\n        if (!isNaN(rev) && rev > Observable.latestRevision[dbname]) {\n          Observable.latestRevision[dbname] = rev;\n          Dexie.ignoreTransaction(function () {\n            Observable.on('latestRevisionIncremented').fire(dbname, rev);\n          });\n        }\n      } else if (prop.indexOf(\"deadnode:\") === 0) {\n        var nodeID = parseInt(prop.split(':')[1], 10);\n        if (event.newValue) {\n          Observable.on.suicideNurseCall.fire(dbname, nodeID);\n        }\n      } else if (prop === 'intercomm') {\n        if (event.newValue) {\n          Observable.on.intercomm.fire(dbname);\n        }\n      }\n    }\n  };\n}\n","export default function initOverrideOpen(db, SyncNode, crudMonitor) {\n  return function overrideOpen(origOpen) {\n    return function () {\n      //\n      // Make sure to subscribe to \"creating\", \"updating\" and \"deleting\" hooks for all observable tables that were created in the stores() method.\n      //\n      Object.keys(db._allTables).forEach(tableName => {\n        let table = db._allTables[tableName];\n        if (table.schema.observable) {\n          crudMonitor(table);\n        }\n        if (table.name === \"_syncNodes\") {\n          table.mapToClass(SyncNode);\n        }\n      });\n      return origOpen.apply(this, arguments);\n    }\n  };\n}\n","import Dexie from 'dexie';\n\nconst Promise = Dexie.Promise;\n\nexport default function initIntercomm(db, Observable, SyncNode, mySyncNode, localStorage) {\n//\n// Intercommunication between nodes\n//\n// Enable inter-process communication between browser windows using localStorage storage event (is registered in Dexie.Observable)\n\n  var requestsWaitingForReply = {};\n\n  /**\n   * @param {string} type Type of message\n   * @param message Message to send\n   * @param {number} destinationNode ID of destination node\n   * @param {{wantReply: boolean, isFailure: boolean, requestId: number}} options If {wantReply: true}, the returned promise will complete with the reply from remote. Otherwise it will complete when message has been successfully sent.</param>\n   */\n  db.observable.sendMessage = function (type, message, destinationNode, options) {\n    /// <param name=\"type\" type=\"String\">Type of message</param>\n    /// <param name=\"message\">Message to send</param>\n    /// <param name=\"destinationNode\" type=\"Number\">ID of destination node</param>\n    /// <param name=\"options\" type=\"Object\" optional=\"true\">{wantReply: Boolean, isFailure: Boolean, requestId: Number}. If wantReply, the returned promise will complete with the reply from remote. Otherwise it will complete when message has been successfully sent.</param>\n    options = options || {};\n    if (!mySyncNode.node)\n      return options.wantReply ?\n          Promise.reject(new Dexie.DatabaseClosedError()) :\n          Promise.resolve(); // If caller doesn't want a reply, it won't catch errors either.\n\n    var msg = {message: message, destinationNode: destinationNode, sender: mySyncNode.node.id, type: type};\n    Dexie.extend(msg, options); // wantReply: wantReply, success: !isFailure, requestId: ...\n    return Dexie.ignoreTransaction(()=> {\n      var tables = [\"_intercomm\"];\n      if (options.wantReply) tables.push(\"_syncNodes\"); // If caller wants a reply, include \"_syncNodes\" in transaction to check that there's a receiver there. Otherwise, new master will get it.\n      var promise = db.transaction('rw', tables, () => {\n        if (options.wantReply) {\n          // Check that there is a receiver there to take the request.\n          return db._syncNodes.where('id').equals(destinationNode).count(receiverAlive => {\n            if (receiverAlive)\n              return db._intercomm.add(msg);\n            else // If we couldn't find a node -> send to master\n              return db._syncNodes.where('isMaster').above(0).first(function (masterNode) {\n                msg.destinationNode = masterNode.id;\n                return db._intercomm.add(msg)\n              });\n          });\n        } else {\n          // If caller doesn't need a response, we don't have to make sure that it gets one.\n          return db._intercomm.add(msg);\n        }\n      }).then(messageId => {\n        var rv = null;\n        if (options.wantReply) {\n          rv = new Promise(function (resolve, reject) {\n            requestsWaitingForReply[messageId.toString()] = {resolve: resolve, reject: reject};\n          });\n        }\n        if (localStorage) {\n          localStorage.setItem(\"Dexie.Observable/intercomm/\" + db.name, messageId.toString());\n        }\n        Observable.on.intercomm.fire(db.name);\n        return rv;\n      });\n\n      if (!options.wantReply) {\n        promise.catch(()=> {\n        });\n        return;\n      } else {\n        // Forward rejection to caller if it waits for reply.\n        return promise;\n      }\n    });\n  };\n\n  // Send a message to all local _syncNodes\n  db.observable.broadcastMessage = function (type, message, bIncludeSelf) {\n    if (!mySyncNode.node) return;\n    var mySyncNodeId = mySyncNode.node.id;\n    Dexie.ignoreTransaction(()=> {\n      db._syncNodes.toArray(nodes => {\n        return Promise.all(nodes\n            .filter(node => node.type === 'local' && (bIncludeSelf || node.id !== mySyncNodeId))\n            .map(node => db.observable.sendMessage(type, message, node.id)));\n      }).catch(()=> {\n      });\n    });\n  };\n\n  function consumeIntercommMessages() {\n    // Check if we got messages:\n    if (!mySyncNode.node) return Promise.reject(new Dexie.DatabaseClosedError());\n\n    return Dexie.ignoreTransaction(()=> {\n      return db.transaction('rw', '_intercomm', function() {\n        return db._intercomm.where({destinationNode: mySyncNode.node.id}).toArray(messages => {\n          messages.forEach(msg => consumeMessage(msg));\n          return db._intercomm.where('id').anyOf(messages.map(msg => msg.id)).delete();\n        });\n      });\n    });\n  }\n\n  function consumeMessage(msg) {\n    if (msg.type === 'response') {\n      // This is a response. Lookup pending request and fulfill its promise.\n      var request = requestsWaitingForReply[msg.requestId.toString()];\n      if (request) {\n        if (msg.isFailure) {\n          request.reject(msg.message.error);\n        } else {\n          request.resolve(msg.message.result);\n        }\n        delete requestsWaitingForReply[msg.requestId.toString()];\n      }\n    } else {\n      // This is a message or request. Fire the event and add an API for the subscriber to use if reply is requested\n      msg.resolve = function (result) {\n        db.observable.sendMessage('response', {result: result}, msg.sender, {requestId: msg.id});\n      };\n      msg.reject = function (error) {\n        db.observable.sendMessage('response', {error: error.toString()}, msg.sender, {isFailure: true, requestId: msg.id});\n      };\n      db.on.message.fire(msg);\n    }\n  }\n\n  // Listener for 'intercomm' events\n  // Gets fired when we get a 'storage' event from local storage or when sendMessage is called\n  // 'storage' is used to communicate between tabs (sendMessage changes the localStorage to trigger the event)\n  // sendMessage is used to communicate in the same tab and to trigger a storage event\n  function onIntercomm(dbname) {\n    // When storage event trigger us to check\n    if (dbname === db.name) {\n      consumeIntercommMessages().catch('DatabaseClosedError', ()=> {});\n    }\n  }\n\n  return {\n    onIntercomm,\n    consumeIntercommMessages\n  };\n}\n","export default function overrideParseStoresSpec(origFunc) {\n  return function(stores, dbSchema) {\n    // Create the _changes and _syncNodes tables\n    stores[\"_changes\"] = \"++rev\";\n    stores[\"_syncNodes\"] = \"++id,myRevision,lastHeartBeat,&url,isMaster,type,status\";\n    stores[\"_intercomm\"] = \"++id,destinationNode\";\n    stores[\"_uncommittedChanges\"] = \"++id,node\"; // For remote syncing when server returns a partial result.\n    // Call default implementation. Will populate the dbSchema structures.\n    origFunc.call(this, stores, dbSchema);\n    // Allow UUID primary keys using $$ prefix on primary key or indexes\n    Object.keys(dbSchema).forEach(function(tableName) {\n      var schema = dbSchema[tableName];\n      if (schema.primKey.name.indexOf('$$') === 0) {\n        schema.primKey.uuid = true;\n        schema.primKey.name = schema.primKey.name.substr(2);\n        schema.primKey.keyPath = schema.primKey.keyPath.substr(2);\n      }\n    });\n    // Now mark all observable tables\n    Object.keys(dbSchema).forEach(function(tableName) {\n      // Marked observable tables with \"observable\" in their TableSchema.\n      if (tableName.indexOf('_') !== 0 && tableName.indexOf('$') !== 0) {\n        dbSchema[tableName].observable = true;\n      }\n    });\n  };\n}\n","import Dexie from 'dexie';\n\nexport default function deleteOldChanges(db) {\n  // This is a background job and should never be done within\n  // a caller's transaction. Use Dexie.ignoreTransaction() to ensure that.\n  // We should not return the Promise but catch it ourselves instead.\n\n  // To prohibit starving the database we want to lock transactions as short as possible\n  // and since we're not in a hurry, we could do this job in chunks and reschedule a\n  // continuation every 500 ms.\n  const CHUNK_SIZE = 100;\n\n  Dexie.ignoreTransaction(()=>{\n    return db._syncNodes.orderBy(\"myRevision\").first(oldestNode => {\n      return db._changes\n          .where(\"rev\").below(oldestNode.myRevision)\n          .limit(CHUNK_SIZE)\n          .primaryKeys();\n    }).then(keysToDelete => {\n      if (keysToDelete.length === 0) return; // Done.\n      return db._changes.bulkDelete(keysToDelete).then(()=> {\n        // If not done garbage collecting, reschedule a continuation of it until done.\n        if (keysToDelete.length === CHUNK_SIZE) {\n          // Limit reached. Changes are there are more job to do. Schedule again:\n          setTimeout(() => db.isOpen() && deleteOldChanges(db), 500);\n        }\n      });\n    });\n  }).catch(()=>{\n    // The operation is not crucial. A failure could almost only be due to that database has been closed.\n    // No need to log this.\n  });\n}\n","/* ========================================================================== \n *                           dexie-observable.js\n * ==========================================================================\n *\n * Dexie addon for observing database changes not just on local db instance\n * but also on other instances, tabs and windows.\n *\n * Comprises a base framework for dexie-syncable.js\n *\n * By David Fahlander, david.fahlander@gmail.com,\n *    Nikolas Poniros, https://github.com/nponiros\n *\n * ==========================================================================\n *\n * Version {version}, {date}\n *\n * https://dexie.org\n *\n * Apache License Version 2.0, January 2004, http://www.apache.org/licenses/\n * \n */\nimport Dexie from 'dexie';\nimport { nop, promisableChain, createUUID } from './utils';\n\nimport initOverrideCreateTransaction from './override-create-transaction';\nimport initWakeupObservers from './wakeup-observers';\nimport initCrudMonitor from './hooks/crud-monitor';\nimport initOnStorage from './on-storage';\nimport initOverrideOpen from './override-open';\nimport initIntercomm from './intercomm';\n\nimport overrideParseStoresSpec from './override-parse-stores-spec';\n\nimport deleteOldChanges from './delete-old-changes';\n\nvar global = self;\n\n/** class DatabaseChange\n    *\n    *  Object contained by the _changes table.\n    */\nvar DatabaseChange = Dexie.defineClass({\n    rev: Number, // Auto-incremented primary key\n    source: String, // Optional source creating the change. Set if transaction.source was set when doing the operation.\n    table: String, // Table name\n    key: Object, // Primary key. Any type.\n    type: Number, // 1 = CREATE, 2 = UPDATE, 3 = DELETE\n    obj: Object, // CREATE: obj contains the object created.\n    mods: Object, // UPDATE: mods contains the modifications made to the object.\n    oldObj: Object // DELETE: oldObj contains the object deleted. UPDATE: oldObj contains the old object before updates applied.\n});\n\n// Import some usable helper functions\nvar override = Dexie.override;\nvar Promise = Dexie.Promise;\nvar browserIsShuttingDown = false;\n\n/** Dexie addon for change tracking and real-time observation.\n * \n * @param {Dexie} db \n */\nfunction Observable(db) {\n    if (!/^(3|4)\\./.test(Dexie.version))\n        throw new Error(`Missing dexie version 3.x or 4.x`);\n    if (db.observable) {\n        if (db.observable.version !== \"{version}\") throw new Error(`Mixed versions of dexie-observable`);\n        return; // Addon already active.\n    }\n\n    var NODE_TIMEOUT = 20000, // 20 seconds before local db instances are timed out. This is so that old changes can be deleted when not needed and to garbage collect old _syncNodes objects.\n        HIBERNATE_GRACE_PERIOD = 20000, // 20 seconds\n        // LOCAL_POLL: The time to wait before polling local db for changes and cleaning up old nodes. \n        // Polling for changes is a fallback only needed in certain circomstances (when the onstorage event doesnt reach all listeners - when different browser windows doesnt share the same process)\n        LOCAL_POLL = 500, // 500 ms. In real-world there will be this value + the time it takes to poll(). A small value is needed in Workers where we cannot rely on storage event.\n        HEARTBEAT_INTERVAL = NODE_TIMEOUT - 5000;\n\n    var localStorage = Observable.localStorageImpl;\n\n    /** class SyncNode\n        *\n        * Object contained in the _syncNodes table.\n        */\n    var SyncNode = Dexie.defineClass({\n        //id: Number,\n        myRevision: Number,\n        type: String, // \"local\" or \"remote\"\n        lastHeartBeat: Number,\n        deleteTimeStamp: Number, // In case lastHeartBeat is too old, a value of now + HIBERNATE_GRACE_PERIOD will be set here. If reached before node wakes up, node will be deleted.\n        url: String, // Only applicable for \"remote\" nodes. Only used in Dexie.Syncable.\n        isMaster: Number, // 1 if true. Not using Boolean because it's not possible to index Booleans in IE implementation of IDB.\n\n        // Below properties should be extended in Dexie.Syncable. Not here. They apply to remote nodes only (type == \"remote\"):\n        syncProtocol: String, // Tells which implementation of ISyncProtocol to use for remote syncing. \n        syncContext: null,\n        syncOptions: Object,\n        connected: false, // FIXTHIS: Remove! Replace with status.\n        status: Number,\n        appliedRemoteRevision: null,\n        remoteBaseRevisions: [{ local: Number, remote: null }],\n        dbUploadState: {\n            tablesToUpload: [String],\n            currentTable: String,\n            currentKey: null,\n            localBaseRevision: Number\n        }\n    });\n\n    db.observable = {version: \"{version}\"};\n    db.observable.SyncNode = SyncNode;\n\n    const wakeupObservers = initWakeupObservers(db, Observable, localStorage);\n    const overrideCreateTransaction = initOverrideCreateTransaction(db, wakeupObservers);\n    const crudMonitor = initCrudMonitor(db);\n    const overrideOpen = initOverrideOpen(db, SyncNode, crudMonitor);\n\n    var mySyncNode = {node: null};\n\n    const intercomm = initIntercomm(db, Observable, SyncNode, mySyncNode, localStorage);\n    const onIntercomm = intercomm.onIntercomm;\n    const consumeIntercommMessages = intercomm.consumeIntercommMessages;\n\n    // Allow other addons to access the local sync node. May be needed by Dexie.Syncable.\n    Object.defineProperty(db, \"_localSyncNode\", {\n        get: function() { return mySyncNode.node; }\n    });\n\n    var pollHandle = null,\n        heartbeatHandle = null;\n\n    if (Dexie.fake) {\n        // This code will never run.\n        // It's here just to enable auto-complete in visual studio - helps a lot when writing code.\n        db.version(1).stores({\n            _syncNodes: \"++id,myRevision,lastHeartBeat\",\n            _changes: \"++rev\",\n            _intercomm: \"++id,destinationNode\",\n            _uncommittedChanges: \"++id,node\"\n        });\n        db._syncNodes.mapToClass(SyncNode);\n        db._changes.mapToClass(DatabaseChange);\n        mySyncNode.node = new SyncNode({\n            myRevision: 0,\n            type: \"local\",\n            lastHeartBeat: Date.now(),\n            deleteTimeStamp: null\n        });\n    }\n\n    //\n    // Override parsing the stores to add \"_changes\" and \"_syncNodes\" tables.\n    // It also adds UUID support for the primary key and sets tables as observable tables.\n    //\n    db.Version.prototype._parseStoresSpec = override(db.Version.prototype._parseStoresSpec, overrideParseStoresSpec);\n\n    // changes event on db:\n    db.on.addEventType({\n        changes: 'asap',\n        cleanup: [promisableChain, nop], // fire (nodesTable, changesTable, trans). Hook called when cleaning up nodes. Subscribers may return a Promise to to more stuff. May do additional stuff if local sync node is master.\n        message: 'asap'\n    });\n\n    //\n    // Override transaction creation to always include the \"_changes\" store when any observable store is involved.\n    //\n    db._createTransaction = override(db._createTransaction, overrideCreateTransaction);\n\n    // If Observable.latestRevsion[db.name] is undefined, set it to 0 so that comparing against it always works.\n    // You might think that it will always be undefined before this call, but in case another Dexie instance in the same\n    // window with the same database name has been created already, this static property will already be set correctly.\n    Observable.latestRevision[db.name] = Observable.latestRevision[db.name] || 0;\n\n    //\n    // Override open to setup hooks for db changes and map the _syncNodes table to class\n    //\n    db.open = override(db.open, overrideOpen);\n\n    db.close = override(db.close, function(origClose) {\n        return function () {\n            if (db.dynamicallyOpened()) return origClose.apply(this, arguments); // Don't observe dynamically opened databases.\n            // Teardown our framework.\n            if (wakeupObservers.timeoutHandle) {\n                clearTimeout(wakeupObservers.timeoutHandle);\n                delete wakeupObservers.timeoutHandle;\n            }\n            Observable.on('latestRevisionIncremented').unsubscribe(onLatestRevisionIncremented);\n            Observable.on('suicideNurseCall').unsubscribe(onSuicide);\n            Observable.on('intercomm').unsubscribe(onIntercomm);\n            Observable.on('beforeunload').unsubscribe(onBeforeUnload);\n            // Inform other db instances in same window that we are dying:\n            if (mySyncNode.node && mySyncNode.node.id) {\n                Observable.on.suicideNurseCall.fire(db.name, mySyncNode.node.id);\n                // Inform other windows as well:\n                if (localStorage) {\n                    localStorage.setItem('Dexie.Observable/deadnode:' + mySyncNode.node.id.toString() + '/' + db.name, \"dead\"); // In IE, this will also wakeup our own window. cleanup() may trigger twice per other db instance. But that doesnt to anything.\n                }\n                mySyncNode.node.deleteTimeStamp = 1; // One millisecond after 1970. Makes it occur in the past but still keeps it truthy.\n                mySyncNode.node.lastHeartBeat = 0;\n                db._syncNodes.put(mySyncNode.node); // This async operation may be cancelled since the browser is closing down now.\n                mySyncNode.node = null;\n            }\n\n            if (pollHandle) clearTimeout(pollHandle);\n            pollHandle = null;\n            if (heartbeatHandle) clearTimeout(heartbeatHandle);\n            heartbeatHandle = null;\n            return origClose.apply(this, arguments);\n        };\n    });\n\n    // Override Dexie.delete() in order to delete Observable.latestRevision[db.name].\n    db.delete = override(db.delete, function(origDelete) {\n        return function() {\n            return origDelete.apply(this, arguments).then(function(result) {\n                // Reset Observable.latestRevision[db.name]\n                Observable.latestRevision[db.name] = 0;\n                return result;\n            });\n        };\n    });\n\n    // When db opens, make sure to start monitor any changes before other db operations will start.\n    db.on(\"ready\", function startObserving() {\n        if (db.dynamicallyOpened()) return db; // Don't observe dynamically opened databases.\n        \n        return db.table(\"_changes\").orderBy(\"rev\").last(function(lastChange) {\n            // Since startObserving() is called before database open() method, this will be the first database operation enqueued to db.\n            // Therefore we know that the retrieved value will be This query will\n            var latestRevision = (lastChange ? lastChange.rev : 0);\n            mySyncNode.node = new SyncNode({\n                myRevision: latestRevision,\n                type: \"local\",\n                lastHeartBeat: Date.now(),\n                deleteTimeStamp: null,\n                isMaster: 0\n            });\n            if (Observable.latestRevision[db.name] < latestRevision) {\n                // Side track . For correctness whenever setting Observable.latestRevision[db.name] we must make sure the event is fired if increased:\n                // There are other db instances in same window that hasnt yet been informed about a new revision\n                Observable.latestRevision[db.name] = latestRevision;\n                Dexie.ignoreTransaction(function() {\n                    Observable.on.latestRevisionIncremented.fire(latestRevision);\n                });\n            }\n            // Add new sync node or if this is a reopening of the database after a close() call, update it.\n            return db._syncNodes.put(mySyncNode.node).then(Dexie.ignoreTransaction(() => {\n                // By default, this node will become master unless we discover an existing, up-to-date master\n                var mySyncNodeShouldBecomeMaster = 1;\n                return db._syncNodes.orderBy('isMaster').reverse().modify(existingNode => {\n                    if (existingNode.isMaster) {\n                        if (existingNode.lastHeartBeat < Date.now() - NODE_TIMEOUT) {\n                            // Existing master record is out-of-date; demote it\n                            existingNode.isMaster = 0;\n                        } else {\n                            // An existing up-to-date master record exists, so it will remain master\n                            mySyncNodeShouldBecomeMaster = 0;\n                        }\n                    }\n\n                    // The local node reference may be unassigned at any point by a database close() operation\n                    if (!mySyncNode.node) return;\n\n                    // Assign the local node state\n                    // This is guaranteed to apply *after* any existing master records have been inspected, due to the orderBy clause\n                    if (existingNode.id === mySyncNode.node.id) {\n                        existingNode.isMaster = mySyncNode.node.isMaster = mySyncNodeShouldBecomeMaster;\n                    }\n                });\n            })).then(() => {\n                Observable.on('latestRevisionIncremented', onLatestRevisionIncremented); // Wakeup when a new revision is available.\n                Observable.on('beforeunload', onBeforeUnload);\n                Observable.on('suicideNurseCall', onSuicide);\n                Observable.on('intercomm', onIntercomm);\n                // Start polling for changes and do cleanups:\n                pollHandle = setTimeout(poll, LOCAL_POLL);\n                // Start heartbeat\n                heartbeatHandle = setTimeout(heartbeat, HEARTBEAT_INTERVAL);\n            }).then(function () {\n                cleanup();\n            });\n        });\n    }, true); // True means the on(ready) event will survive a db reopening (db.close() / db.open()).\n\n    var handledRevision = 0;\n\n    function onLatestRevisionIncremented(dbname, latestRevision) {\n        if (dbname === db.name) {\n            if (handledRevision >= latestRevision) return; // Make sure to only run once per revision. (Workaround for IE triggering storage event on same window)\n            handledRevision = latestRevision;\n            Dexie.vip(function() {\n                readChanges(latestRevision).catch('DatabaseClosedError', ()=>{\n                    // Handle database closed error gracefully while reading changes.\n                    // Don't trigger 'unhandledrejection'.\n                    // Even though we intercept the close() method, it might be called when in the middle of\n                    // reading changes and then that flow will cancel with DatabaseClosedError.\n                });\n            });\n        }\n    }\n\n    function readChanges(latestRevision, recursion, wasPartial) {\n        // Whenever changes are read, fire db.on(\"changes\") with the array of changes. Eventually, limit the array to 1000 entries or so (an entire database is\n        // downloaded from server AFTER we are initiated. For example, if first sync call fails, then after a while we get reconnected. However, that scenario\n        // should be handled in case database is totally empty we should fail if sync is not available)\n        if (!recursion && readChanges.ongoingOperation) {\n            // We are already reading changes. Prohibit a parallell execution of this which would lead to duplicate trigging of 'changes' event.\n            // Instead, the callback in toArray() will always check Observable.latestRevision[db.name] to see if it has changed and if so, re-launch readChanges().\n            // The caller should get the Promise instance from the ongoing operation so that the then() method will resolve when operation is finished.\n            return readChanges.ongoingOperation;\n        }\n\n        var partial = false;\n        var ourSyncNode = mySyncNode.node; // Because mySyncNode can suddenly be set to null on database close, and worse, can be set to a new value if database is reopened.\n        if (!ourSyncNode) {\n            return Promise.reject(new Dexie.DatabaseClosedError());\n        }\n        var LIMIT = 1000;\n        var promise = db._changes.where(\"rev\").above(ourSyncNode.myRevision).limit(LIMIT).toArray(function (changes) {\n            if (changes.length > 0) {\n                var lastChange = changes[changes.length - 1];\n                partial = (changes.length === LIMIT);\n                db.on('changes').fire(changes, partial);\n                ourSyncNode.myRevision = lastChange.rev;\n            } else if (wasPartial) {\n                // No more changes, BUT since we have triggered on('changes') with partial = true,\n                // we HAVE TO trigger changes again with empty list and partial = false\n                db.on('changes').fire([], false);\n            }\n\n            let ourNodeStillExists = false;\n            return db._syncNodes.where(':id').equals(ourSyncNode.id).modify(syncNode => {\n                ourNodeStillExists = true;\n                syncNode.lastHeartBeat = Date.now(); // Update heart beat (not nescessary, but why not!)\n                syncNode.deleteTimeStamp = null; // Reset \"deleteTimeStamp\" flag if it was there.\n                syncNode.myRevision = Math.max(syncNode.myRevision, ourSyncNode.myRevision);\n            }).then(()=>ourNodeStillExists);\n        }).then(ourNodeStillExists =>{\n            if (!ourNodeStillExists) {\n                // My node has been deleted. We must have been lazy and got removed by another node.\n                if (browserIsShuttingDown) {\n                    throw new Error(\"Browser is shutting down\");\n                } else {\n                    db.close();\n                    console.error(\"Out of sync\"); // TODO: What to do? Reload the page?\n                    if (global.location) global.location.reload(true);\n                    throw new Error(\"Out of sync\"); // Will make current promise reject\n                }\n            }\n\n            // Check if more changes have come since we started reading changes in the first place. If so, relaunch readChanges and let the ongoing promise not\n            // resolve until all changes have been read.\n            if (partial || Observable.latestRevision[db.name] > ourSyncNode.myRevision) {\n                // Either there were more than 1000 changes or additional changes where added while we were reading these changes,\n                // In either case, call readChanges() again until we're done.\n                return readChanges(Observable.latestRevision[db.name], (recursion || 0) + 1, partial);\n            }\n\n        }).finally(function() {\n            delete readChanges.ongoingOperation;\n        });\n\n        if (!recursion) {\n            readChanges.ongoingOperation = promise;\n        }\n        return promise;\n    }\n\n    /**\n     * The reason we need heartbeat in parallell with poll() is due to the risk of long-running\n     * transactions while syncing changes from server to client in Dexie.Syncable. That transaction will\n     * include _changes (which will block readChanges()) but not _syncNodes. So this heartbeat will go on\n     * during that changes are being applied and update our lastHeartBeat property while poll() is waiting.\n     * When cleanup() (who also is blocked by the sync) wakes up, it won't kill the master node because this\n     * heartbeat job will have updated the master node's heartbeat during the long-running sync transaction.\n     * \n     * If we did not have this heartbeat, and a server send lots of changes that took more than NODE_TIMEOUT\n     * (20 seconds), another node waking up after the sync would kill the master node and take over because\n     * it would believe it was dead.\n     */\n    function heartbeat() {\n        heartbeatHandle = null;\n        var currentInstance = mySyncNode.node && mySyncNode.node.id;\n        if (!currentInstance) return;\n        db.transaction('rw!', db._syncNodes, ()=>{\n            db._syncNodes.where({id: currentInstance}).first(ourSyncNode => {\n                if (!ourSyncNode) {\n                    // We do not exist anymore. Call db.close() to teardown polls etc.\n                    if (db.isOpen()) db.close();\n                    return;\n                }\n                ourSyncNode.lastHeartBeat = Date.now();\n                ourSyncNode.deleteTimeStamp = null; // Reset \"deleteTimeStamp\" flag if it was there.\n                return db._syncNodes.put(ourSyncNode);\n            });\n        }).catch('DatabaseClosedError', () => {\n            // Ignore silently\n        }).finally(() => {\n            if (mySyncNode.node && mySyncNode.node.id === currentInstance && db.isOpen()) {\n                heartbeatHandle = setTimeout(heartbeat, HEARTBEAT_INTERVAL);\n            }\n        });\n    }\n\n    function poll() {\n        pollHandle = null;\n        var currentInstance = mySyncNode.node && mySyncNode.node.id;\n        if (!currentInstance) return;\n        Dexie.vip(function() { // VIP ourselves. Otherwise we might not be able to consume intercomm messages from master node before database has finished opening. This would make DB stall forever. Cannot rely on storage-event since it may not always work in some browsers of different processes.\n            readChanges(Observable.latestRevision[db.name]).then(cleanup).then(consumeIntercommMessages)\n            .catch('DatabaseClosedError', ()=>{\n                // Handle database closed error gracefully while reading changes.\n                // Don't trigger 'unhandledrejection'.\n                // Even though we intercept the close() method, it might be called when in the middle of\n                // reading changes and then that flow will cancel with DatabaseClosedError.\n            })\n            .finally(function() {\n                // Poll again in given interval:\n                if (mySyncNode.node && mySyncNode.node.id === currentInstance && db.isOpen()) {\n                    pollHandle = setTimeout(poll, LOCAL_POLL);\n                }\n            });\n        });\n    }\n\n    \n    function cleanup() {\n        var ourSyncNode = mySyncNode.node;\n        if (!ourSyncNode) return Promise.reject(new Dexie.DatabaseClosedError());\n        return db.transaction('rw', '_syncNodes', '_changes', '_intercomm', function() {\n            // Cleanup dead local nodes that has no heartbeat for over a minute\n            // Dont do the following:\n            //nodes.where(\"lastHeartBeat\").below(Date.now() - NODE_TIMEOUT).and(function (node) { return node.type == \"local\"; }).delete();\n            // Because client may have been in hybernate mode and recently woken up. That would lead to deletion of all nodes.\n            // Instead, we should mark any old nodes for deletion in a minute or so. If they still dont wakeup after that minute we could consider them dead.\n            var weBecameMaster = false;\n            db._syncNodes.where(\"lastHeartBeat\").below(Date.now() - NODE_TIMEOUT).filter(node => node.type === 'local').modify(function(node) {\n                if (node.deleteTimeStamp && node.deleteTimeStamp < Date.now()) {\n                    // Delete the node.\n                    delete this.value;\n                    // Cleanup localStorage \"deadnode:\" entry for this node (localStorage API was used to wakeup other windows (onstorage event) - an event type missing in indexedDB.)\n                    if (localStorage) {\n                        localStorage.removeItem('Dexie.Observable/deadnode:' + node.id + '/' + db.name);\n                    }\n                    // Check if we are deleting a master node\n                    if (node.isMaster) {\n                        // The node we are deleting is master. We must take over that role.\n                        // OK to call nodes.update(). No need to call Dexie.vip() because nodes is opened in existing transaction!\n                        db._syncNodes.update(ourSyncNode, { isMaster: 1 });\n                        weBecameMaster = true;\n                    }\n                    // Cleanup intercomm messages destinated to the node being deleted.\n                    // Those that waits for reply should be redirected to us.\n                    db._intercomm.where({destinationNode: node.id}).modify(function(msg) {\n                        if (msg.wantReply)\n                            msg.destinationNode = ourSyncNode.id;\n                        else\n                            // Delete the message from DB and if someone is waiting for reply, let ourselved answer the request.\n                            delete this.value;\n                    });\n                } else if (!node.deleteTimeStamp) {\n                    // Mark the node for deletion\n                    node.deleteTimeStamp = Date.now() + HIBERNATE_GRACE_PERIOD;\n                }\n            }).then(function() {\n                // Cleanup old revisions that no node is interested of.\n                Observable.deleteOldChanges(db);\n                return db.on(\"cleanup\").fire(weBecameMaster);\n            });\n        });\n    }\n\n    function onBeforeUnload() {\n        // Mark our own sync node for deletion.\n        if (!mySyncNode.node) return;\n        browserIsShuttingDown = true;\n        mySyncNode.node.deleteTimeStamp = 1; // One millisecond after 1970. Makes it occur in the past but still keeps it truthy.\n        mySyncNode.node.lastHeartBeat = 0;\n        db._syncNodes.put(mySyncNode.node); // This async operation may be cancelled since the browser is closing down now.\n        Observable.wereTheOneDying = true; // If other nodes in same window wakes up by this call, make sure they dont start taking over mastership and stuff...\n        // Inform other windows that we're gone, so that they may take over our role if needed. Setting localStorage item below will trigger Observable.onStorage, which will trigger onSuicie() below:\n        if (localStorage) {\n            localStorage.setItem('Dexie.Observable/deadnode:' + mySyncNode.node.id.toString() + '/' + db.name, \"dead\"); // In IE, this will also wakeup our own window. However, that is doublechecked in nursecall subscriber below.\n        }\n    }\n\n    function onSuicide(dbname, nodeID) {\n        if (dbname === db.name && !Observable.wereTheOneDying) {\n            // Make sure it's dead indeed. Second bullet. Why? Because it has marked itself for deletion in the onbeforeunload event, which is fired just before window dies.\n            // It's own call to put() may have been cancelled.\n            // Note also that in IE, this event may be called twice, but that doesnt harm!\n            Dexie.vip(function() {\n                db._syncNodes.update(nodeID, { deleteTimeStamp: 1, lastHeartBeat: 0 }).then(cleanup);\n            });\n        }\n    }\n\n}\n\n//\n// Static properties and methods\n// \n\nObservable.version = \"{version}\";\nObservable.latestRevision = {}; // Latest revision PER DATABASE. Example: Observable.latestRevision.FriendsDB = 37;\nObservable.on = Dexie.Events(null, \"latestRevisionIncremented\", \"suicideNurseCall\", \"intercomm\", \"beforeunload\"); // fire(dbname, value);\nObservable.createUUID = createUUID;\n\nObservable.deleteOldChanges = deleteOldChanges;\n\nObservable._onStorage = initOnStorage(Observable);\n\nObservable._onBeforeUnload = function() {\n    Observable.on.beforeunload.fire();\n};\n\ntry {\n    Observable.localStorageImpl = global.localStorage;\n} catch (ex){}\n\n//\n// Map window events to static events in Dexie.Observable:\n//\nif (global?.addEventListener) {\n    global.addEventListener(\"storage\", Observable._onStorage);\n    global.addEventListener(\"beforeunload\", Observable._onBeforeUnload);\n}\n\nif (Dexie.Observable) {\n    if (Dexie.Observable.version !== \"{version}\") {\n        throw new Error (`Mixed versions of dexie-observable`);\n    }\n} else {\n    // Register addon:\n    Dexie.Observable = Observable;\n    Dexie.addons.push(Observable);\n}\n\nexport default Dexie.Observable;\n"],"names":["Dexie","Promise"],"mappings":"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"}